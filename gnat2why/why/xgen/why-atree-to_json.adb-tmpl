with Common_Containers; use Common_Containers;
with Why.Sinfo; use Why.Sinfo;

package body Why.Atree.To_Json is

   function Boolean_To_Json (B : Boolean) return JSON_Value renames Create;
   function Uint_To_Json (I : Uint) return JSON_Value;
   function Ureal_To_Json (I : Ureal) return JSON_Value;
   function Node_Id_To_Json (Id : Node_Id) return JSON_Value;
   function Why_Node_Id_To_Json (Id : Why_Node_Id) return JSON_Value;
   function Why_Node_OId_To_Json (Id : Why_Node_Id) return JSON_Value
      renames Why_Node_Id_To_Json;
   function Why_Node_OList_To_Json (Id : Why_Node_List) return JSON_Value;
   function Why_Node_List_To_Json (Id : Why_Node_List) return JSON_Value
      renames Why_Node_OList_To_Json;
   function Why_Node_Set_To_Json (S : Why_Node_Set) return JSON_Value;
   function Source_Ptr_To_Json (P : Source_Ptr) return JSON_Value;
   function Symbol_To_Json (S : Symbol) return JSON_Value;
   function Symbol_Set_To_Json (S : Symbol_Set) return JSON_Value;
   function String_Sets_Set_To_Json (S : String_Sets.Set) return JSON_Value;

   function Uint_To_Json (I : Uint) return JSON_Value
      is (Create (Nat'Image (UI_To_Int (I))));

   function Ureal_To_Json (I : Ureal) return JSON_Value
      is (Create); --  TODO

   function Why_Node_OList_To_Json (Id : Why_Node_List) return JSON_Value is
      (Why_Node_Lists_List_To_Json (Get_List (Id)));

   function String_Sets_Set_To_Json (S : String_Sets.Set) return JSON_Value is
      use String_Sets;
      Res : constant JSON_Value := Create (Empty_Array);
      C : String_Sets.Cursor := First (S);
   begin
      while Has_Element (C) loop
         Append (Res, Create (Element (C)));
         Next (C);
      end loop;
      return Res;
   end String_Sets_Set_To_Json;

   function Why_Node_Lists_List_To_Json (L : Why_Node_Lists.List)
   return JSON_Value is
      use Why_Node_Lists;
      Res : constant JSON_Value := Create (Empty_Array);
      C : Why_Node_Lists.Cursor := First (L);
   begin
      while Has_Element (C) loop
         Append (Res, Why_Node_Id_To_Json  (Element (C)));
         Next (C);
      end loop;
      return Res;
   end Why_Node_Lists_List_To_Json;

   function Source_Ptr_To_Json (P : Source_Ptr) return JSON_Value
      is (Create); --  TODO

   function Symbol_To_Json (S : Symbol) return JSON_Value
      is (Create);

   function Symbol_Set_To_Json (S : Symbol_Set) return JSON_Value
      is (Create);

   function Node_Id_To_Json (Id : Node_Id) return JSON_Value
      is (Create);

   function Why_Node_Set_To_Json (S : Why_Node_Set) return JSON_Value
      is (Create);

   function Why_Node_Id_To_Json (Id : Why_Node_Id) return JSON_Value
      is (Why_Node_To_Json (Get_Node (Id)));

   _@Declare_Ada_To_Json@_
end Why.Atree.To_Json;
